<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog 
	xmlns="http://www.liquibase.org/xml/ns/dbchangelog" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:n0="http://www.oracle.com/xml/ns/dbchangelog-ext" 
	xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog 
	http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd">
	<changeSet id="75cf3fe5fa6b23cb1ec6d406239949632c2cb765" author="(SAMPLE_CUSTOMERS)-Generated" failOnError="false"   runOnChange="true" runAlways="false"  >
		<n0:createOracleTrigger objectName="AU_EBA_CUST_CUSTOMERS" objectType="TRIGGER" ownerName="SAMPLE_CUSTOMERS"  replaceIfExists="true" >
			<n0:source><![CDATA[
  CREATE OR REPLACE EDITIONABLE TRIGGER "SAMPLE_CUSTOMERS"."AU_EBA_CUST_CUSTOMERS" 
    after update on eba_cust_customers
    for each row
declare
    ov varchar2(4000) := null;
    nv varchar2(4000) := null;
begin
    -- CUSTOMER_NAME (default)
    if nvl(:old.customer_name, '0') != nvl(:new.customer_name,'0') then 
        insert into eba_cust_history (table_name, component_rowkey, component_id, column_name, old_value, new_value) values 
            ('CUSTOMERS', :new.row_key, :new.id, 'CUSTOMER_NAME', substr(:old.customer_name,0,4000), substr(:new.customer_name,0,4000) ); 
    end if;
    -- CUSTOMER_NAME_UPPER (default)
    if nvl(:old.customer_name_upper, '0') != nvl(:new.customer_name_upper,'0') then 
        insert into eba_cust_history (table_name, component_rowkey, component_id, column_name, old_value, new_value) values 
            ('CUSTOMERS', :new.row_key, :new.id, 'CUSTOMER_NAME_UPPER', substr(:old.customer_name_upper,0,4000), substr(:new.customer_name_upper,0,4000) ); 
    end if;
    -- INDUSTRY_ID (foreign key)
    if nvl(:old.industry_id,-999) != nvl(:new.industry_id,-999) then
        ov := null; nv := null;
        for c1 in (select industry_name val from eba_cust_industries t where t.id = :old.industry_id) loop
            ov := c1.val;
        end loop;
        for c1 in (select industry_name val from eba_cust_industries t where t.id = :new.industry_id) loop
            nv := c1.val;
        end loop;
        insert into eba_cust_history (table_name, component_rowkey, component_id, column_name, old_value, new_value) values
            ('CUSTOMERS', :new.row_key, :new.id, 'INDUSTRY_ID', ov, nv);
    end if;
    -- CATEGORY_ID (foreign key)
    if nvl(:old.category_id,-999) != nvl(:new.category_id,-999) then
        ov := null; nv := null;
        for c1 in (select category val from eba_cust_categories t where t.id = :old.category_id) loop
            ov := c1.val;
        end loop;
        for c1 in (select category val from eba_cust_categories t where t.id = :new.category_id) loop
            nv := c1.val;
        end loop;
        insert into eba_cust_history (table_name, component_rowkey, component_id, column_name, old_value, new_value) values
            ('CUSTOMERS', :new.row_key, :new.id, 'CATEGORY_ID', ov, nv);
    end if;
    -- STATUS_ID (foreign key)
    if nvl(:old.status_id,-999) != nvl(:new.status_id,-999) then
        ov := null; nv := null;
        for c1 in (select status val from eba_cust_status t where t.id = :old.status_id) loop
            ov := c1.val;
        end loop;
        for c1 in (select status val from eba_cust_status t where t.id = :new.status_id) loop
            nv := c1.val;
        end loop;
        insert into eba_cust_history (table_name, component_rowkey, component_id, column_name, old_value, new_value) values
            ('CUSTOMERS', :new.row_key, :new.id, 'STATUS_ID', ov, nv);
    end if;
    -- GEOGRAPHY_ID (foreign key)
    if nvl(:old.geography_id,-999) != nvl(:new.geography_id,-999) then
        ov := null; nv := null;
        for c1 in (select geography_name val from eba_cust_geographies t where t.id = :old.geography_id) loop
            ov := c1.val;
        end loop;
        for c1 in (select geography_name val from eba_cust_geographies t where t.id = :new.geography_id) loop
            nv := c1.val;
        end loop;
        insert into eba_cust_history (table_name, component_rowkey, component_id, column_name, old_value, new_value) values
            ('CUSTOMERS', :new.row_key, :new.id, 'GEOGRAPHY_ID', ov, nv);
    end if;
    -- REFERENCABLE (default)
    if nvl(:old.referencable, '0') != nvl(:new.referencable,'0') then 
        insert into eba_cust_history (table_name, component_rowkey, component_id, column_name, old_value, new_value) values 
            ('CUSTOMERS', :new.row_key, :new.id, 'REFERENCABLE', substr(:old.referencable,0,4000), substr(:new.referencable,0,4000) ); 
    end if;
    -- MARQUEE_CUSTOMER_YN (default)
    if nvl(:old.marquee_customer_yn, '0') != nvl(:new.marquee_customer_yn,'0') then 
        insert into eba_cust_history (table_name, component_rowkey, component_id, column_name, old_value, new_value) values 
            ('CUSTOMERS', :new.row_key, :new.id, 'MARQUEE_CUSTOMER', substr(:old.marquee_customer_yn,0,4000), substr(:new.marquee_customer_yn,0,4000) ); 
    end if;
    -- TAGS (default)
    if nvl(:old.tags, '0') != nvl(:new.tags,'0') then 
        insert into eba_cust_history (table_name, component_rowkey, component_id, column_name, old_value, new_value) values 
            ('CUSTOMERS', :new.row_key, :new.id, 'TAGS', substr(:old.tags,0,4000), substr(:new.tags,0,4000) ); 
    end if;
    -- CUSTOMER_PRODUCTS (default)
    if nvl(:old.customer_products, '0') != nvl(:new.customer_products,'0') then 
        insert into eba_cust_history (table_name, component_rowkey, component_id, column_name, old_value, new_value) values 
            ('CUSTOMERS', :new.row_key, :new.id, 'CUSTOMER_PRODUCTS', substr(:old.customer_products,0,4000), substr(:new.customer_products,0,4000) ); 
    end if;
    -- NUMBER_OF_USERS (default)
    if nvl(:old.number_of_users, '0') != nvl(:new.number_of_users,'0') then 
        insert into eba_cust_history (table_name, component_rowkey, component_id, column_name, old_value, new_value) values 
            ('CUSTOMERS', :new.row_key, :new.id, 'NUMBER_OF_USERS', substr(:old.number_of_users,0,4000), substr(:new.number_of_users,0,4000) ); 
    end if;
    -- SUMMARY (default)
    if nvl(:old.summary, '0') != nvl(:new.summary,'0') then 
        insert into eba_cust_history (table_name, component_rowkey, component_id, column_name, old_value, new_value) values 
            ('CUSTOMERS', :new.row_key, :new.id, 'SUMMARY', substr(:old.summary,0,4000), substr(:new.summary,0,4000) ); 
    end if;
    -- CUSTOMER_PROFILE (default)
    if nvl(:old.customer_profile, '0') != nvl(:new.customer_profile,'0') then 
        insert into eba_cust_history (table_name, component_rowkey, component_id, column_name, old_value, new_value) values 
            ('CUSTOMERS', :new.row_key, :new.id, 'CUSTOMER_PROFILE', substr(:old.customer_profile,0,4000), substr(:new.customer_profile,0,4000) ); 
    end if;
    -- APPLICATIONS (default)
    if nvl(:old.applications, '0') != nvl(:new.applications,'0') then 
        insert into eba_cust_history (table_name, component_rowkey, component_id, column_name, old_value, new_value) values 
            ('CUSTOMERS', :new.row_key, :new.id, 'APPLICATIONS', substr(:old.applications,0,4000), substr(:new.applications,0,4000) ); 
    end if;
    -- WEB_SITE (default)
    if nvl(:old.web_site, '0') != nvl(:new.web_site,'0') then 
        insert into eba_cust_history (table_name, component_rowkey, component_id, column_name, old_value, new_value) values 
            ('CUSTOMERS', :new.row_key, :new.id, 'WEB_SITE', substr(:old.web_site,0,4000), substr(:new.web_site,0,4000) ); 
    end if;
    -- LINKEDIN (default)
    if nvl(:old.linkedin, '0') != nvl(:new.linkedin,'0') then 
        insert into eba_cust_history (table_name, component_rowkey, component_id, column_name, old_value, new_value) values 
            ('CUSTOMERS', :new.row_key, :new.id, 'LINKEDIN', substr(:old.linkedin,0,4000), substr(:new.linkedin,0,4000) ); 
    end if;
    -- FACEBOOK (default)
    if nvl(:old.facebook, '0') != nvl(:new.facebook,'0') then 
        insert into eba_cust_history (table_name, component_rowkey, component_id, column_name, old_value, new_value) values 
            ('CUSTOMERS', :new.row_key, :new.id, 'FACEBOOK', substr(:old.facebook,0,4000), substr(:new.facebook,0,4000) ); 
    end if;
    -- TWITTER (default)
    if nvl(:old.twitter, '0') != nvl(:new.twitter,'0') then 
        insert into eba_cust_history (table_name, component_rowkey, component_id, column_name, old_value, new_value) values 
            ('CUSTOMERS', :new.row_key, :new.id, 'TWITTER', substr(:old.twitter,0,4000), substr(:new.twitter,0,4000) ); 
    end if;
    -- STOCK_SYMBOL (default)
    if nvl(:old.stock_symbol, '0') != nvl(:new.stock_symbol,'0') then 
        insert into eba_cust_history (table_name, component_rowkey, component_id, column_name, old_value, new_value) values 
            ('CUSTOMERS', :new.row_key, :new.id, 'STOCK_SYMBOL', substr(:old.stock_symbol,0,4000), substr(:new.stock_symbol,0,4000) ); 
    end if;
    -- SIC (default)
    if nvl(:old.sic, '0') != nvl(:new.sic,'0') then 
        insert into eba_cust_history (table_name, component_rowkey, component_id, column_name, old_value, new_value) values 
            ('CUSTOMERS', :new.row_key, :new.id, 'SIC', substr(:old.sic,0,4000), substr(:new.sic,0,4000) ); 
    end if;
    -- DUNS (default)
    if nvl(:old.duns, '0') != nvl(:new.duns,'0') then 
        insert into eba_cust_history (table_name, component_rowkey, component_id, column_name, old_value, new_value) values 
            ('CUSTOMERS', :new.row_key, :new.id, 'DUNS', substr(:old.duns,0,4000), substr(:new.duns,0,4000) ); 
    end if;
end au_eba_cust_customers;

ALTER TRIGGER "SAMPLE_CUSTOMERS"."AU_EBA_CUST_CUSTOMERS" ENABLE]]></n0:source>
		</n0:createOracleTrigger>
	</changeSet>
</databaseChangeLog>
